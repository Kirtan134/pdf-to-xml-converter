generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  password      String?
  image         String?
  preferences   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  conversions   Conversion[]
  sessions      Session[]

  @@map("user")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtoken")
}

model Conversion {
  id               String           @id @default(uuid())
  userId           String
  filename         String
  originalUrl      String
  convertedXml     String
  pageCount        Int              @default(1)
  structureType    String           @default("enhanced")
  detectedTables   Int              @default(0)
  detectedLists    Int              @default(0)
  detectedHeadings Int              @default(0)
  detectedImages   Int              @default(0)
  status           ConversionStatus @default(COMPLETED)
  processingTime   Int?
  fileSize         Int?
  tags             String?
  metadata         String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  characterCount   Int              @default(0)
  wordCount        Int              @default(0)
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("conversion")
}

enum ConversionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
